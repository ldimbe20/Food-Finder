import React, { useEffect, useState } from "react"
import { Link, useHistory } from "react-router-dom"




export const FriendProfileList = () => {
    const [friendFoodRestriction, setFriendFoodRestriction] = useState([])
    const [friendNameList, setFriendNameList] = useState([])
    const history= useHistory()

    useEffect( 
        () => {
            getFriendFoodRestriction()
        },
        []
    ) 

    const getFriendFoodRestriction = () => {  //!this componenent is used to set the state of friendFoodRestriction
        return fetch("http://localhost:8088/friendFoodRestrictions?_expand=severity&_expand=friend") //gathering data from server
            .then(res => res.json()) //changing the data to javascript
            .then((data) => { //setting that data to data
                setFriendFoodRestriction(data)  //invoking setFriendFoodRestriction to capture date and set new state of friendFoodRestriction
            })
    }

    const getFriendName = () => {  //!this componenent is used to set the state of setFriendNameList
        return fetch("http://localhost:8088/friends") //gathering data from api
            .then(res => res.json())//converting data to javascript
            .then((data) => { //setting javascript data to data
                setFriendNameList(data)//invoking setFriendFoodRestriction to capture date and set new state of friendFoodRestriction
            })
            }
    }

    useEffect( 
        () => {
            getFriendName()
        },
        []
    ) 

    const deleteProfile = (id, friendId) => { //using friendId and id as arguments to be deleted 
        fetch(`http://localhost:8088/friendFoodRestrictions/${id}`, {  //gathering data from api
           

            method: "DELETE" //deleted that data
        })
            .then  
                (() => { deleteFriend(friendId) }) //then running deleteFriend function that deletes the friendId 
            .then
            (() => { getFriendFoodRestriction() }) //replacing information after profile is deleted to reset data
    }      


    
    const deleteFriend = (id) => { //!this component deletes the friendId that is associated with the friendFoodRestrictionId
        fetch(`http://localhost:8088/friends/${id}`, { 
          

            method: "DELETE" //deleted that data
        })
    }


    const loggedIn = parseInt(localStorage.getItem("food_customer")) //! this component is a variable that equals the id of food_customer
    return ( //!this component returns the profile created by user
        <>

            {
                friendFoodRestriction.map( //mapping through friendFoodRestrictions and returning a profile for each argument or friend
                    (friend) => {

                        return <div key={`friendFoodRestriction--${friendFoodRestriction.id}`}>
                            {loggedIn === friend.friend.userId
                                ? <>
                                    <h1> {friend?.friend?.name} </h1>
                                    <p>is allergic to {friend.foodRestrictionName}</p>
                                    <p>The severity of their allergy is a level {friend?.severity?.level}</p>
                                    <button onClick={() => {
                                        deleteProfile(friend.id, friend.friendId)  
                                    }}>Delete</button>  </>
                                : ""}

                        </div>
                    }
                )
            }
        </>
    )
}